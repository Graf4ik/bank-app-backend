basePath: /api/v1
definitions:
  entities.AccountResponse:
    description: Response returned when retrieving account information.
    properties:
      balance:
        type: number
      currency:
        type: string
      id:
        type: integer
      status:
        type: string
      type:
        type: string
      user_id:
        type: integer
    type: object
  entities.AuthResponse:
    description: AuthResponse contains the access and refresh tokens
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  entities.CreateAccountRequest:
    description: Request payload for creating a new user account with a specified
      type and currency.
    properties:
      currency:
        type: string
      type:
        type: string
    required:
    - currency
    - type
    type: object
  entities.DepositRequest:
    description: Запрос для пополнения счёта пользователя на определённую сумму.
    properties:
      account_id:
        type: integer
      amount:
        type: number
    required:
    - account_id
    - amount
    type: object
  entities.ErrorResponse:
    description: ErrorResponse structure
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  entities.LoginRequest:
    description: LoginRequest model
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  entities.LogoutRequest:
    description: LogoutRequest model
    properties:
      userId:
        type: integer
    required:
    - userId
    type: object
  entities.MessageResponse:
    description: Success message response
    properties:
      message:
        type: string
    type: object
  entities.RefreshTokenRequest:
    description: RefreshTokenRequest model
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  entities.RegisterRequest:
    description: RegisterRequest model
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  entities.Transaction:
    description: Transaction is a record of a financial transaction between accounts.
    properties:
      amount:
        type: number
      created_at:
        type: string
      description:
        type: string
      from_account_id:
        type: integer
      id:
        type: integer
      to_account_id:
        type: integer
      type:
        $ref: '#/definitions/entities.TransferType'
      user_id:
        type: integer
    type: object
  entities.TransferRequest:
    description: TransferRequest is used to initiate a transfer between two accounts.
    properties:
      amount:
        type: number
      description:
        type: string
      from_account_id:
        type: integer
      to_account_id:
        type: integer
      type:
        $ref: '#/definitions/entities.TransferType'
      user_id:
        type: integer
    type: object
  entities.TransferType:
    enum:
    - internal
    - external
    - deposit
    type: string
    x-enum-varnames:
    - InternalTransfer
    - ExternalTransfer
    - Deposit
  entities.UpdateUserRequest:
    description: Update user model
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  entities.User:
    description: User model
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  entities.UserResponse:
    description: Public user information without sensitive fields like password.
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a banking app server.
  title: Bank App API
  version: "1.0"
paths:
  /auth/accounts:
    get:
      description: Returns a list of accounts belonging to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.AccountResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all user accounts
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: Creates a new account for the authenticated user
      parameters:
      - description: Account creation data
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/entities.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.AccountResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Failed to create account
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new account
      tags:
      - accounts
  /auth/accounts/{id}:
    get:
      description: Returns a specific account by ID if it belongs to the authenticated
        user
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.AccountResponse'
        "400":
          description: Invalid account ID
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user account by ID
      tags:
      - accounts
    patch:
      description: Closes an account if its balance is zero
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Account closed successfully
          schema:
            $ref: '#/definitions/entities.MessageResponse'
        "400":
          description: Cannot close account
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Close a user account
      tags:
      - accounts
  /auth/accounts/deposit:
    post:
      consumes:
      - application/json
      description: Adds money to the user's account
      parameters:
      - description: Deposit data
        in: body
        name: deposit
        required: true
        schema:
          $ref: '#/definitions/entities.DepositRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.AccountResponse'
        "400":
          description: Invalid input or account
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deposit to an account
      tags:
      - accounts
  /auth/transactions:
    get:
      consumes:
      - application/json
      description: Get a list of transactions for a user, with optional filters for
        pagination, date range, type, and amount
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit number of transactions
        in: query
        name: limit
        type: integer
      - description: From date (YYYY-MM-DD)
        in: query
        name: fromDate
        type: string
      - description: To date (YYYY-MM-DD)
        in: query
        name: toDate
        type: string
      - description: Transaction type
        in: query
        name: type
        type: string
      - description: Minimum amount
        in: query
        name: minAmount
        type: number
      - description: Maximum amount
        in: query
        name: maxAmount
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: List of transactions
          schema:
            items:
              $ref: '#/definitions/entities.Transaction'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get a list of transactions
      tags:
      - Transactions
  /auth/transactions/{id}:
    get:
      consumes:
      - application/json
      description: Get transaction details by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Transaction details
          schema:
            $ref: '#/definitions/entities.Transaction'
        "400":
          description: Invalid transaction ID
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "404":
          description: Transaction not found
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get a transaction by ID
      tags:
      - Transactions
  /auth/transfers/external:
    post:
      consumes:
      - application/json
      description: Process an external transfer between accounts
      parameters:
      - description: Transfer request
        in: body
        name: transfer
        required: true
        schema:
          $ref: '#/definitions/entities.TransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Transaction details
          schema:
            $ref: '#/definitions/entities.Transaction'
        "400":
          description: Error processing transfer
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: External transfer
      tags:
      - Transactions
  /auth/transfers/internal:
    post:
      consumes:
      - application/json
      description: Process an internal transfer between accounts
      parameters:
      - description: Transfer request
        in: body
        name: transfer
        required: true
        schema:
          $ref: '#/definitions/entities.TransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Transaction details
          schema:
            $ref: '#/definitions/entities.Transaction'
        "400":
          description: Error processing transfer
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Internal transfer
      tags:
      - Transactions
  /login:
    post:
      consumes:
      - application/json
      description: Log in using email and password
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/entities.AuthResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Login user
      tags:
      - Authentication
  /logout:
    post:
      consumes:
      - application/json
      description: Logs out the user by invalidating the session or token
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Log out user
      tags:
      - Authentication
  /me:
    get:
      consumes:
      - application/json
      description: Retrieves the authenticated user's data
      produces:
      - application/json
      responses:
        "200":
          description: User data retrieved successfully
          schema:
            $ref: '#/definitions/entities.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get user information
      tags:
      - Users
  /refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the JWT access and refresh tokens
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens successfully refreshed
          schema:
            $ref: '#/definitions/entities.AuthResponse'
        "400":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - Authentication
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Registering user
      tags:
      - Authentication
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves all users
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            items:
              $ref: '#/definitions/entities.UserResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Get all users
      tags:
      - Users
  /users/{id}:
    patch:
      consumes:
      - application/json
      description: Updates a user's information by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entities.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/entities.UserResponse'
        "400":
          description: Invalid input or user ID
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entities.ErrorResponse'
      summary: Update a user
      tags:
      - Users
swagger: "2.0"
